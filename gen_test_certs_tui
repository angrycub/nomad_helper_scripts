#!/usr/bin/env bash
_fn=""
_fc=""
_fv=""

function checkFor {
  if [ -x "$(command -v "$1")" ]; then return 0; else return 1; fi
}

function exitToBool {
  if [ $? -eq 0 ]; then echo "true"; else echo "false"; fi
}

function boolToExit {
  if [ "${1}" == "true" ]; then return 0; fi
  return 1
}

function foundNomad {
  if [[ "${_fn}" == "" ]]; then
    _fn="$(exitToBool $(checkFor nomad))"
  fi
  boolToExit "${_fn}"
  return $?
}

function foundConsul {
  if [[ "${_fc}" == "" ]]; then
    _fc="$(exitToBool $(checkFor nomad))"
  fi
  boolToExit "${_fc}"
  return $?
}

function foundVault {
  if [[ "${_fv}" == "" ]]; then
    _fv="$(exitToBool $(checkFor vault))"
  fi
  boolToExit "${_fv}"
  return $?
}

# Check for a nomad binary. This tool isn't terribly useful without one.
if ! foundNomad ; then
  echo "You need to have the nomad CLI tool installed and in your PATH."
  exit 1
else
  _vn=$(nomad version | head -n 1 | sed 's/^Nomad //g')
fi

if foundConsul ; then
  _vc="$(consul version | head -n 1 | sed 's/Consul //g')"
fi

if foundVault ; then
  _vv="$(vault version | head -n 1 | sed 's/Vault //g')"
fi

## Find a tool we can use to generate mTLS certificates with.

# Check to see if the nomad binary supports the `nomad tls` command
# We can determine if the Nomad command supports the tls subcommand by checking for
# "Usage: nomad tls" in the output
foundNomadTLS=false
if nomad tls | grep -q "Usage: nomad tls"; then
  foundNomadTLS=true
fi

# If we don't have a version with `nomad tls` then we can look for a consul
# binary and see if it has `consul tls` 

# While we're here, go ahead and validate that the consul version found (if so)
# supports the consul tls command.
foundConsulTLS=false
if foundConsul && consul 2>&1 | grep -q tls; then
  foundConsulTLS=true
fi

# Consul's name is one space longer than Nomad and Vault, so if we are outputting
# consul info, make a padding character
if foundConsul ; then sp=" "; fi

# Build the message for the box.
message="${sp}  Nomad: ${_vn}\n"
if foundConsul ; then message+="  Consul: ${_vc}\n"; fi
if foundVault ; then message+="${sp}  Vault: ${_vv}\n"; fi

exec 3>&1

o=$(dialog --title "Welcome" --clear --msgbox \
"Welcome. This utility will help you create\n
a mTLS enabled Nomad Cluster.\n\n
Before we start, let's see what versions of\n
the HashiCorp applications are on this node.\n\n
${message}
" 16 51 2>&1 1>&3)

# inputbox - demonstrate the input dialog box with redirection

# Define the dialog exit status codes
: ${DIALOG_OK=0}
: ${DIALOG_CANCEL=1}
: ${DIALOG_HELP=2}
: ${DIALOG_EXTRA=3}
: ${DIALOG_ITEM_HELP=4}
: ${DIALOG_ESC=255}

# Generate the dialog box while running dialog in a subshell
result=$(dialog \
  --title "Cluster Region" \
  --clear  \
  --inputbox \
"Please enter a space-separated list of\n 
the regions of the Nomad clusters you\n
wish to create mTLS certificates for.\n 
The default region name is \"global\"." \
16 51 global 2>&1 1>&3)

# Get dialog's exit status
return_value=$?

# Close file descriptor 3
exec 3>&-

# Clear the screen since dialog leaves it messy
clear

# Act on the exit status
case $return_value in
  $DIALOG_OK)
    ;;
  $DIALOG_CANCEL)
    echo "Cancel pressed.";;
  $DIALOG_HELP)
    echo "Help pressed.";;
  $DIALOG_EXTRA)
    echo "Extra button pressed.";;
  $DIALOG_ITEM_HELP)
    echo "Item-help button pressed.";;
  $DIALOG_ESC)
    if test -n "$result" ; then
      echo "$result"
    else
      echo "ESC pressed."
    fi
    ;;
esac

if [[ "${result}" == "" ]]; then
  exit 1
fi

regions="${result}"

if [ "$regions" == "" ]; then
  regions="global"
fi

  echo "🔐 Generating mTLS certificates..."

  GOOS=`go env GOOS`
  GOARCH=`go env GOARCH`
   
  consul="consul"
  if ! [ -x "$(command -v consul)" ]; then
    echo 'Notice: consul is not installed. Fetching a copy.' >&2
    fetchedConsul=true
    wget --no-verbose https://releases.hashicorp.com/consul/1.11.3/consul_1.11.3_${GOOS}_${GOARCH}.zip
    unzip consul_1.11.3_${GOOS}_${GOARCH}.zip > /dev/null 2>&1
    rm -f consul_1.11.3_${GOOS}_${GOARCH}.zip > /dev/null 2>&1
    consul="./consul"
  fi

  echo " - Cenerating CA..."
  ${consul} tls ca create -domain="nomad" > /dev/null 2>&1

  for Region in $regions
  do
    echo -n " - \"${Region}\""
    if [ "$fetchedConsul" == "true" ]; then consul="../consul"; fi
    ${consul} tls cert create -ca=../nomad-agent-ca.pem -key=../nomad-agent-ca-key.pem -dc="${Region}" -domain="nomad" -server > /dev/null
    ${consul} tls cert create -ca=../nomad-agent-ca.pem -key=../nomad-agent-ca-key.pem -dc="${Region}" -domain="nomad" -client > /dev/null

    cat > .state/config.${Region}/tls.hcl << EOH
tls {
  http = true
  rpc  = true

  ca_file   = "nomad-agent-ca.pem"
  cert_file = "tls.${Region}/${Region}-server-nomad-0.pem"
  key_file  = "tls.${Region}/${Region}-server-nomad-0-key.pem"
}
EOH
    echo " ✅"
  done

  if [ "${fetchedConsul}" == "true" ]; then
    echo " - Removing temporary Consul download..."
    rm -f ${consul}
  fi
  echo ""
